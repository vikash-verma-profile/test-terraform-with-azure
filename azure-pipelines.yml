# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.

trigger:
  - main

pool:
  name: Self-Hosted

steps:
  # Check if Terraform is Installed
  - task: PowerShell@2
    displayName: "Check and Install Terraform"
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    inputs:
      targetType: "inline"
      script: |
        $terraform = Get-Command terraform -ErrorAction SilentlyContinue
        if ($terraform -eq $null) {
          Write-Host "Terraform not found. Installing..."
          Invoke-WebRequest -Uri "https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_windows_amd64.zip" -OutFile "terraform.zip"
          Expand-Archive -Path "terraform.zip" -DestinationPath "C:\terraform"
          $env:Path += ";C:\terraform"
          Write-Host "Terraform installed successfully."
        } else {
          Write-Host "Terraform is already installed."
        }

  # List all files in the working directory
  - script: dir /s /b
    displayName: "List Files in Directory"

  # Azure CLI
  - task: PowerShell@2
    displayName: "Azure CLI login"
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    inputs:
      targetType: "inline"
      script: |
        az login --service-principal -u $(ARM_CLIENT_ID) -p $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)

  # Initialize Terraform
  - task: PowerShell@2
    displayName: "Intialize Terraform"
    inputs:
      targetType: "inline"
      script: |
        cd terraform
        terraform init

  # Validate Terraform
  - task: PowerShell@2
    displayName: "Validate Terraform"
    inputs:
      targetType: "inline"
      script: |
        cd terraform
        terraform validate

    # Plan Terraform
  - task: PowerShell@2
    displayName: "Plan Terraform"
    inputs:
      targetType: "inline"
      script: |
        cd terraform
        terraform.exe plan -out=tfplan `
          -var "ARM_CLIENT_ID=$(ARM_CLIENT_ID)" `
          -var "ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)" `
          -var "ARM_TENANT_ID=$(ARM_TENANT_ID)" `
          -var "ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)"

    # Apply Terraform for apply
  - task: PowerShell@2
    displayName: "Apply Terraform"
    inputs:
      targetType: "inline"
      script: |
        cd terraform
        terraform.exe apply -auto-approve `
          -var "ARM_CLIENT_ID=$(ARM_CLIENT_ID)" `
          -var "ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)" `
          -var "ARM_TENANT_ID=$(ARM_TENANT_ID)" `
          -var "ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)"
      # Destroy Terraform for apply
  - task: PowerShell@2
    displayName: "Destroy Terraform"
    inputs:
      targetType: "inline"
      script: |
        cd terraform
        terraform.exe destroy -auto-approve `
          -var "ARM_CLIENT_ID=$(ARM_CLIENT_ID)" `
          -var "ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)" `
          -var "ARM_TENANT_ID=$(ARM_TENANT_ID)" `
          -var "ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)"
